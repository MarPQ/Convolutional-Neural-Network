# -*- coding: utf-8 -*-
"""Actividad_10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nLfsAbmIRJ1qH_5WoomCQj4AJijfHHM6
"""

import numpy as np
import matplotlib.pyplot as plt

from sklearn.metrics import classification_report, confusion_matrix
import cv2

from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
from keras.datasets import mnist

(xtrain,ytrain), (xtest,ytest) = mnist.load_data()

xtrain = xtrain.astype('float32')/255
xtest = xtest.astype('float32')/255

xtrain = xtrain.reshape(xtrain.shape[0],28,28,1)
xtest = xtest.reshape(xtest.shape[0],28,28,1)

ytrain = keras.utils.to_categorical(ytrain,10)
ytest = keras.utils.to_categorical(ytest,10)

model = Sequential()

#Primera capa
model.add(Conv2D(25,kernel_size=(3,3),strides=(1,1),padding='same',activation='relu',input_shape=(28,28,1)))
model.add(MaxPooling2D(pool_size=(2,2)))
#Segunda capa
model.add(Conv2D(25,kernel_size=(3,3),strides=(1,1),padding='same',activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
#Realizamos un flatten
model.add(Flatten())
model.add(Dense(50,activation='relu'))
model.add(Dense(25,activation='relu'))
#Ultima capa de clasificacion
model.add(Dense(10,activation='softmax'))

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

hist = model.fit(xtrain,ytrain,batch_size=64,epochs=32,verbose=1,validation_data=(xtest,ytest))

plt.figure()
plt.grid()
plt.plot(hist.history['accuracy'],lw=2)
plt.plot(hist.history['val_accuracy'],lw=2)
plt.title('Model accuracy')
plt.xlabel('accuracy')
plt.ylabel('epoch')
plt.legend(['train','test'])
plt.show()

plt.figure()
plt.grid()
plt.plot(hist.history['loss'],lw=2)
plt.plot(hist.history['val_loss'],lw=2)
plt.title('Model loss')
plt.xlabel('loss')
plt.ylabel('epoch')
plt.legend(['train','test'])
plt.show()

ypred = model.predict(xtest)

y_pred = np.argmax(ypred,axis=1)
y_test = np.argmax(ytest,axis=1)

print('\nMétricas: \n', classification_report(y_test,y_pred));

print('Matriz de confusión: \n', confusion_matrix(y_test,y_pred))

#model.save('Model_mnist_2.h5')
model = keras.models.load_model('Model_mnist_2.h5')

img = cv2.imread('2.jpg')
img_gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

th, img_bn = cv2.threshold(img_gray,100,255,cv2.THRESH_BINARY_INV)
img_bn = cv2.resize(img_bn,(28,28))

patron = img_bn.reshape(1,28,28,1)/255

pred = model.predict(patron)
num = np.argmax(model.predict(patron),axis=1)

plt.figure()
plt.imshow(patron[0,:,:,0],cmap=plt.cm.gray)
plt.title('Prediction: ' + str(num))
plt.show()